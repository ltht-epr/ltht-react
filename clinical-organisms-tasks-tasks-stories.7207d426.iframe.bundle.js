/*! For license information please see clinical-organisms-tasks-tasks-stories.7207d426.iframe.bundle.js.LICENSE.txt */
(self.webpackChunk_ltht_react_storybook=self.webpackChunk_ltht_react_storybook||[]).push([[9215],{"./src/clinical/organisms/tasks/tasks.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Cancelled:()=>Cancelled,Completed:()=>Completed,Redacted:()=>Redacted,TaskWithHoverText:()=>TaskWithHoverText,TasksStory:()=>TasksStory,WithActions:()=>WithActions,WithActionsAndInteraction:()=>WithActionsAndInteraction,WithFullScreenControl:()=>WithFullScreenControl,WithProfessions:()=>WithProfessions,__namedExportsOrder:()=>__namedExportsOrder,default:()=>tasks_stories});var react=__webpack_require__("../../node_modules/react/index.js"),lib=__webpack_require__("../../components/styled/card/lib/index.js"),lib_default=__webpack_require__.n(lib),task_lib=__webpack_require__("../../components/clinical/task/lib/index.js"),task_lib_default=__webpack_require__.n(task_lib),types_lib=__webpack_require__("../types/lib/index.js");const mockMetadata={dataSources:[{display:"Mock"}],isRedacted:!1,requestedWhen:""},now=new Date;now.setMinutes(now.getMinutes()-20);const Task1={id:"task-1",isEnteredInError:!1,intent:types_lib.IntentCode.Order,metadata:mockMetadata,status:types_lib.TaskStatusCode.Overdue,description:"Task 1 Description",performerType:{text:"Forms"},extension:[{url:"https://leedsth.nhs.uk/task/display-due-time",valueString:"20 mins ago"}]},Task2={id:"task-2",isEnteredInError:!1,intent:types_lib.IntentCode.Plan,metadata:mockMetadata,status:types_lib.TaskStatusCode.NotYetDue,description:"Obs Due",performerType:{text:"Forms"},extension:[{url:"https://leedsth.nhs.uk/task/display-due-time",valueString:"30 mins ago"}]},Task3={id:"task-3",isEnteredInError:!1,intent:types_lib.IntentCode.Plan,metadata:mockMetadata,status:types_lib.TaskStatusCode.NotYetDue,description:"Task 5 Description",performerType:{text:"Forms"},extension:[{url:"https://leedsth.nhs.uk/task/display-due-time",valueString:"an hour ago"}]},Task4={id:"task-4",isEnteredInError:!1,intent:types_lib.IntentCode.Plan,metadata:mockMetadata,status:types_lib.TaskStatusCode.Due,description:"Task 4 Description",performerType:{text:"Forms"},extension:[{url:"https://leedsth.nhs.uk/task/display-due-time",valueString:"a few seconds ago"}]},Task5={id:"task-5",isEnteredInError:!1,intent:types_lib.IntentCode.Plan,metadata:mockMetadata,status:types_lib.TaskStatusCode.Overdue,description:"Task 7 Description",performerType:{text:"Forms"},extension:[{url:"https://leedsth.nhs.uk/task/display-due-time",valueString:"20 mins"}]},Task6={id:"task-6",isEnteredInError:!1,intent:types_lib.IntentCode.Plan,metadata:mockMetadata,status:types_lib.TaskStatusCode.Overdue,description:"Obs Overdue",performerType:{text:"Forms"},extension:[{url:"https://leedsth.nhs.uk/task/display-due-time",valueString:"50 mins"}]},Task7={id:"task-7",isEnteredInError:!1,intent:types_lib.IntentCode.Order,metadata:mockMetadata,status:types_lib.TaskStatusCode.Due,description:"Start the eDAN",performerType:{text:"Forms"},extension:[{url:"https://leedsth.nhs.uk/task/display-due-time",valueString:"34 hours ago"}]},CompletedTask={id:"completed-task",isEnteredInError:!1,intent:types_lib.IntentCode.Plan,metadata:mockMetadata,status:types_lib.TaskStatusCode.Complete,description:"Task 5 Description",performerType:{text:"Forms"},extension:[{url:"https://leedsth.nhs.uk/task/display-due-time",valueString:"2 mins ago"}],executionPeriod:{start:{value:"2021-04-20T09:00:00"},end:{value:"2021-04-21T00:00:00"}}},CancelledTask={id:"cancelled-task",isEnteredInError:!1,intent:types_lib.IntentCode.Plan,metadata:mockMetadata,status:types_lib.TaskStatusCode.Cancelled,description:"Task 6 Description",performerType:{text:"Forms"},extension:[{url:"https://leedsth.nhs.uk/task/display-due-time",valueString:"7 mins ago"}],executionPeriod:{start:{value:"2021-04-20T09:00:00"},end:{value:"2021-04-21T00:00:00"}}},RedactedTask={id:"redacted-task",isEnteredInError:!1,intent:types_lib.IntentCode.Plan,metadata:{dataSources:[{display:"Mock"}],isRedacted:!0,requestedWhen:""},status:types_lib.TaskStatusCode.Due,performerType:{text:"Forms"},extension:[{url:"https://leedsth.nhs.uk/task/display-due-time",valueString:"20 mins ago"}],executionPeriod:{start:{value:"2021-04-20T09:00:00"},end:{value:"2021-04-21T00:00:00"}},description:"Redacted Task Description"},TaskActions=[{text:"Close",clickHandler:()=>{},leftIcon:{type:"cross",size:"medium",color:"red"}},{text:"Reassign",clickHandler:()=>{},leftIcon:{type:"edit",size:"medium",color:"info-blue"}}],TaskActionsWithoutIcons=[{text:"Close",clickHandler:()=>{}},{text:"Reassign",clickHandler:()=>{}}],Tasks=[Task1,Task2,Task3,Task4,Task5,Task6,Task7,CompletedTask,CancelledTask];var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}const TasksStory=()=>{const[selectedTaskId,setSelectedTaskId]=(0,react.useState)("");return(0,jsx_runtime.jsxs)(lib_default(),{children:[(0,jsx_runtime.jsx)(lib_default().Header,{children:(0,jsx_runtime.jsx)(lib_default().Title,{children:"Tasks"})}),(0,jsx_runtime.jsx)(lib_default().List,{children:Tasks.map((task=>{const canPerformAction=!["COMPLETE","CANCELLED"].includes(task.status)&&!task.metadata.isRedacted,props=_objectSpread({key:task.id,selected:task.id===selectedTaskId},canPerformAction&&{onClick:()=>{return taskId=task.id,console.log(`${taskId} Clicked!`),void setSelectedTaskId(taskId);var taskId}});return(0,jsx_runtime.jsx)(lib_default().ListItem,_objectSpread(_objectSpread({},props),{},{children:(0,jsx_runtime.jsx)(task_lib_default(),{task})}))}))})]})};TasksStory.displayName="TasksStory",TasksStory.storyName="Tasks";const Redacted=()=>(0,jsx_runtime.jsxs)(lib_default(),{children:[(0,jsx_runtime.jsx)(lib_default().Header,{children:(0,jsx_runtime.jsx)(lib_default().Title,{children:"Tasks"})}),(0,jsx_runtime.jsx)(lib_default().List,{children:(0,jsx_runtime.jsx)(lib_default().ListItem,{children:(0,jsx_runtime.jsx)(task_lib_default(),{task:RedactedTask})})})]});Redacted.displayName="Redacted";const Completed=()=>(0,jsx_runtime.jsxs)(lib_default(),{children:[(0,jsx_runtime.jsx)(lib_default().Header,{children:(0,jsx_runtime.jsx)(lib_default().Title,{children:"Tasks"})}),(0,jsx_runtime.jsx)(lib_default().List,{children:(0,jsx_runtime.jsx)(lib_default().ListItem,{children:(0,jsx_runtime.jsx)(task_lib_default(),{task:CompletedTask})})})]});Completed.displayName="Completed";const Cancelled=()=>(0,jsx_runtime.jsxs)(lib_default(),{children:[(0,jsx_runtime.jsx)(lib_default().Header,{children:(0,jsx_runtime.jsx)(lib_default().Title,{children:"Tasks"})}),(0,jsx_runtime.jsx)(lib_default().List,{children:(0,jsx_runtime.jsx)(lib_default().ListItem,{children:(0,jsx_runtime.jsx)(task_lib_default(),{task:CancelledTask})})})]});Cancelled.displayName="Cancelled";const TaskWithHoverText=()=>(0,jsx_runtime.jsxs)(lib_default(),{children:[(0,jsx_runtime.jsx)(lib_default().Header,{children:(0,jsx_runtime.jsx)(lib_default().Title,{children:"Tasks"})}),(0,jsx_runtime.jsx)(lib_default().List,{children:(0,jsx_runtime.jsxs)(lib_default().ListItem,{children:[(0,jsx_runtime.jsx)(task_lib_default(),{task:Tasks[0],hoverText:"something to show in title"}),(0,jsx_runtime.jsx)(task_lib_default(),{task:Tasks[1]})]})})]});TaskWithHoverText.displayName="TaskWithHoverText";const WithActions=()=>(0,jsx_runtime.jsxs)(lib_default(),{children:[(0,jsx_runtime.jsx)(lib_default().Header,{children:(0,jsx_runtime.jsx)(lib_default().Title,{children:"Tasks with Actions"})}),(0,jsx_runtime.jsx)(lib_default().List,{children:Tasks.map(((task,index)=>(0,jsx_runtime.jsx)(lib_default().ListItem,{children:(0,jsx_runtime.jsx)(task_lib_default(),{task,users:index%2==0?"Clinical Genetics":void 0,user:index%3==0?"Dr. Reginald Berkeley (MRI)":void 0,actions:index%2==0?TaskActions:void 0})})))})]});WithActions.displayName="WithActions";const WithActionsAndInteraction=()=>{const[selectedTaskId,setSelectedTaskId]=(0,react.useState)("");return(0,jsx_runtime.jsxs)(lib_default(),{children:[(0,jsx_runtime.jsx)(lib_default().Header,{children:(0,jsx_runtime.jsx)(lib_default().Title,{children:"Tasks with Actions & Interaction"})}),(0,jsx_runtime.jsxs)(lib_default().List,{children:[Tasks.map(((task,index)=>{const canPerformAction=!["COMPLETE","CANCELLED"].includes(task.status)&&!task.metadata.isRedacted,props=_objectSpread({key:task.id,selected:task.id===selectedTaskId},canPerformAction&&{onClick:()=>{return taskId=task.id,console.log(`${taskId} Clicked!`),void setSelectedTaskId(taskId);var taskId}});return(0,jsx_runtime.jsx)(lib_default().ListItem,_objectSpread(_objectSpread({},props),{},{children:(0,jsx_runtime.jsx)(task_lib_default(),{task,users:index%2==0?"Clinical Genetics":void 0,user:index%3==0?"Dr. Reginald Berkeley (MRI)":void 0,actions:index%2==0?TaskActions:void 0})}))})),(0,jsx_runtime.jsx)(lib_default().ListItem,{children:(0,jsx_runtime.jsx)(task_lib_default(),{task:Tasks[0],actions:TaskActionsWithoutIcons})})]})]})};WithActionsAndInteraction.displayName="WithActionsAndInteraction";const WithProfessions=()=>{const[selectedTaskId,setSelectedTaskId]=(0,react.useState)("");return(0,jsx_runtime.jsxs)(lib_default(),{children:[(0,jsx_runtime.jsx)(lib_default().Header,{children:(0,jsx_runtime.jsx)(lib_default().Title,{children:"Tasks"})}),(0,jsx_runtime.jsx)(lib_default().List,{children:Tasks.map(((task,index)=>{const canPerformAction=!["COMPLETE","CANCELLED"].includes(task.status)&&!task.metadata.isRedacted,props=_objectSpread({key:task.id,selected:task.id===selectedTaskId},canPerformAction&&{onClick:()=>{return taskId=task.id,console.log(`${taskId} Clicked!`),void setSelectedTaskId(taskId);var taskId}});let users="";switch(index%4){case 0:users="Doctor - Consultant, Doctor - Other Resident";break;case 1:users="Physician Associate, Nurse";break;case 2:users="Orthotics";break;case 3:users="Clinical Genetics Associate, Nurse, Psychology"}return(0,jsx_runtime.jsx)(lib_default().ListItem,_objectSpread(_objectSpread({},props),{},{children:(0,jsx_runtime.jsx)(task_lib_default(),{task,user:users,actions:index%2==0?TaskActions:void 0})}))}))})]})};WithProfessions.displayName="WithProfessions";const WithFullScreenControl=()=>{const ref=(0,react.useRef)(null);return(0,jsx_runtime.jsxs)(lib_default(),{ref,children:[(0,jsx_runtime.jsxs)(lib_default().Header,{style:{justifyContent:"space-between"},children:[(0,jsx_runtime.jsx)(lib_default().Title,{children:"Tasks with Full Screen Control"}),(0,jsx_runtime.jsx)(lib_default().FullScreenControl,{elementRef:ref})]}),(0,jsx_runtime.jsx)(lib_default().List,{children:Tasks.map(((task,index)=>(0,jsx_runtime.jsx)(lib_default().ListItem,{children:(0,jsx_runtime.jsx)(task_lib_default(),{task,users:index%2==0?"Clinical Genetics":void 0,user:index%3==0?"Dr. Reginald Berkeley (MRI)":void 0,actions:index%2==0?TaskActions:void 0})})))})]})};WithFullScreenControl.displayName="WithFullScreenControl";const tasks_stories={title:"Clinical/Organisms/Tasks"};TasksStory.parameters={...TasksStory.parameters,docs:{...TasksStory.parameters?.docs,source:{originalSource:"() => {\n  const [selectedTaskId, setSelectedTaskId] = useState('');\n  const handleSelectTask = (taskId: string) => {\n    // eslint-disable-next-line no-console\n    console.log(`${taskId} Clicked!`);\n    setSelectedTaskId(taskId);\n  };\n  return <Card>\r\n      <Card.Header>\r\n        <Card.Title>Tasks</Card.Title>\r\n      </Card.Header>\r\n      <Card.List>\r\n        {Tasks.map(task => {\n        const canPerformAction = !['COMPLETE', 'CANCELLED'].includes(task.status) && !task.metadata.isRedacted;\n        const props = {\n          key: task.id,\n          selected: task.id === selectedTaskId,\n          ...(canPerformAction && {\n            onClick: () => handleSelectTask(task.id)\n          })\n        };\n        return <Card.ListItem {...props}>\r\n              <Task task={task} />\r\n            </Card.ListItem>;\n      })}\r\n      </Card.List>\r\n    </Card>;\n}",...TasksStory.parameters?.docs?.source}}},Redacted.parameters={...Redacted.parameters,docs:{...Redacted.parameters?.docs,source:{originalSource:"() => <Card>\r\n    <Card.Header>\r\n      <Card.Title>Tasks</Card.Title>\r\n    </Card.Header>\r\n    <Card.List>\r\n      <Card.ListItem>\r\n        <Task task={RedactedTask} />\r\n      </Card.ListItem>\r\n    </Card.List>\r\n  </Card>",...Redacted.parameters?.docs?.source}}},Completed.parameters={...Completed.parameters,docs:{...Completed.parameters?.docs,source:{originalSource:"() => <Card>\r\n    <Card.Header>\r\n      <Card.Title>Tasks</Card.Title>\r\n    </Card.Header>\r\n    <Card.List>\r\n      <Card.ListItem>\r\n        <Task task={CompletedTask} />\r\n      </Card.ListItem>\r\n    </Card.List>\r\n  </Card>",...Completed.parameters?.docs?.source}}},Cancelled.parameters={...Cancelled.parameters,docs:{...Cancelled.parameters?.docs,source:{originalSource:"() => <Card>\r\n    <Card.Header>\r\n      <Card.Title>Tasks</Card.Title>\r\n    </Card.Header>\r\n    <Card.List>\r\n      <Card.ListItem>\r\n        <Task task={CancelledTask} />\r\n      </Card.ListItem>\r\n    </Card.List>\r\n  </Card>",...Cancelled.parameters?.docs?.source}}},TaskWithHoverText.parameters={...TaskWithHoverText.parameters,docs:{...TaskWithHoverText.parameters?.docs,source:{originalSource:'() => <Card>\r\n    <Card.Header>\r\n      <Card.Title>Tasks</Card.Title>\r\n    </Card.Header>\r\n    <Card.List>\r\n      <Card.ListItem>\r\n        <Task task={Tasks[0]} hoverText="something to show in title" />\r\n        <Task task={Tasks[1]} />\r\n      </Card.ListItem>\r\n    </Card.List>\r\n  </Card>',...TaskWithHoverText.parameters?.docs?.source}}},WithActions.parameters={...WithActions.parameters,docs:{...WithActions.parameters?.docs,source:{originalSource:"() => <Card>\r\n    <Card.Header>\r\n      <Card.Title>Tasks with Actions</Card.Title>\r\n    </Card.Header>\r\n    <Card.List>\r\n      {Tasks.map((task, index) => <Card.ListItem>\r\n          <Task task={task} users={index % 2 === 0 ? 'Clinical Genetics' : undefined} user={index % 3 === 0 ? 'Dr. Reginald Berkeley (MRI)' : undefined} actions={index % 2 === 0 ? TaskActions : undefined} />\r\n        </Card.ListItem>)}\r\n    </Card.List>\r\n  </Card>",...WithActions.parameters?.docs?.source}}},WithActionsAndInteraction.parameters={...WithActionsAndInteraction.parameters,docs:{...WithActionsAndInteraction.parameters?.docs,source:{originalSource:"() => {\n  const [selectedTaskId, setSelectedTaskId] = useState('');\n  const handleSelectTask = (taskId: string) => {\n    // eslint-disable-next-line no-console\n    console.log(`${taskId} Clicked!`);\n    setSelectedTaskId(taskId);\n  };\n  return <Card>\r\n      <Card.Header>\r\n        <Card.Title>Tasks with Actions & Interaction</Card.Title>\r\n      </Card.Header>\r\n      <Card.List>\r\n        {Tasks.map((task, index) => {\n        const canPerformAction = !['COMPLETE', 'CANCELLED'].includes(task.status) && !task.metadata.isRedacted;\n        const props = {\n          key: task.id,\n          selected: task.id === selectedTaskId,\n          ...(canPerformAction && {\n            onClick: () => handleSelectTask(task.id)\n          })\n        };\n        return <Card.ListItem {...props}>\r\n              <Task task={task} users={index % 2 === 0 ? 'Clinical Genetics' : undefined} user={index % 3 === 0 ? 'Dr. Reginald Berkeley (MRI)' : undefined} actions={index % 2 === 0 ? TaskActions : undefined} />\r\n            </Card.ListItem>;\n      })}\r\n        <Card.ListItem>\r\n          <Task task={Tasks[0]} actions={TaskActionsWithoutIcons} />\r\n        </Card.ListItem>\r\n      </Card.List>\r\n    </Card>;\n}",...WithActionsAndInteraction.parameters?.docs?.source}}},WithProfessions.parameters={...WithProfessions.parameters,docs:{...WithProfessions.parameters?.docs,source:{originalSource:"() => {\n  const [selectedTaskId, setSelectedTaskId] = useState('');\n  const handleSelectTask = (taskId: string) => {\n    // eslint-disable-next-line no-console\n    console.log(`${taskId} Clicked!`);\n    setSelectedTaskId(taskId);\n  };\n  return <Card>\r\n      <Card.Header>\r\n        <Card.Title>Tasks</Card.Title>\r\n      </Card.Header>\r\n      <Card.List>\r\n        {Tasks.map((task, index) => {\n        const canPerformAction = !['COMPLETE', 'CANCELLED'].includes(task.status) && !task.metadata.isRedacted;\n        const props = {\n          key: task.id,\n          selected: task.id === selectedTaskId,\n          ...(canPerformAction && {\n            onClick: () => handleSelectTask(task.id)\n          })\n        };\n        let users = '';\n        switch (index % 4) {\n          case 0:\n            users = 'Doctor - Consultant, Doctor - Other Resident';\n            break;\n          case 1:\n            users = 'Physician Associate, Nurse';\n            break;\n          case 2:\n            users = 'Orthotics';\n            break;\n          case 3:\n            users = 'Clinical Genetics Associate, Nurse, Psychology';\n            break;\n        }\n        return <Card.ListItem {...props}>\r\n              <Task task={task} user={users} actions={index % 2 === 0 ? TaskActions : undefined} />\r\n            </Card.ListItem>;\n      })}\r\n      </Card.List>\r\n    </Card>;\n}",...WithProfessions.parameters?.docs?.source}}},WithFullScreenControl.parameters={...WithFullScreenControl.parameters,docs:{...WithFullScreenControl.parameters?.docs,source:{originalSource:"() => {\n  const ref = useRef<HTMLDivElement>(null);\n  return <Card ref={ref}>\r\n      <Card.Header style={{\n      justifyContent: 'space-between'\n    }}>\r\n        <Card.Title>Tasks with Full Screen Control</Card.Title>\r\n        <Card.FullScreenControl elementRef={ref} />\r\n      </Card.Header>\r\n      <Card.List>\r\n        {Tasks.map((task, index) => <Card.ListItem>\r\n            <Task task={task} users={index % 2 === 0 ? 'Clinical Genetics' : undefined} user={index % 3 === 0 ? 'Dr. Reginald Berkeley (MRI)' : undefined} actions={index % 2 === 0 ? TaskActions : undefined} />\r\n          </Card.ListItem>)}\r\n      </Card.List>\r\n    </Card>;\n}",...WithFullScreenControl.parameters?.docs?.source}}};const __namedExportsOrder=["TasksStory","Redacted","Completed","Cancelled","TaskWithHoverText","WithActions","WithActionsAndInteraction","WithProfessions","WithFullScreenControl"]},"../../components/clinical/task/lib/atoms/task-description.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __makeTemplateObject=this&&this.__makeTemplateObject||function(cooked,raw){return Object.defineProperty?Object.defineProperty(cooked,"raw",{value:raw}):cooked.raw=raw,cooked},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var templateObject_1,jsx_runtime_1=__webpack_require__("../../node_modules/react/jsx-runtime.js"),StyledDescription=__importDefault(__webpack_require__("../../node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js")).default.div(templateObject_1||(templateObject_1=__makeTemplateObject(["\n  text-decoration: ",";\n"],["\n  text-decoration: ",";\n"])),(function(_a){return _a.cancelled?"line-through":"none"}));exports.default=function(_a){var description=_a.description,hoverText=_a.hoverText,cancelled=_a.cancelled;return description?(0,jsx_runtime_1.jsx)(StyledDescription,{cancelled,title:null!=hoverText?hoverText:description,children:description}):null}},"../../components/clinical/task/lib/atoms/task-status.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __makeTemplateObject=this&&this.__makeTemplateObject||function(cooked,raw){return Object.defineProperty?Object.defineProperty(cooked,"raw",{value:raw}):cooked.raw=raw,cooked},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var templateObject_1,jsx_runtime_1=__webpack_require__("../../node_modules/react/jsx-runtime.js"),styled_1=__importDefault(__webpack_require__("../../node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js")),styles_1=__webpack_require__("../styles/lib/index.js"),utils_1=__webpack_require__("../utils/lib/index.js"),types_1=__webpack_require__("../types/lib/index.js"),StyledTaskStatus=styled_1.default.small(templateObject_1||(templateObject_1=__makeTemplateObject(["\n  color: ",";\n"],["\n  color: ",";\n"])),(function(_a){return function(status){switch(status){case types_1.TaskStatusCode.Overdue:return"red";case types_1.TaskStatusCode.Due:return"#ffa500";default:return"".concat(styles_1.TEXT_COLOURS.SECONDARY.VALUE)}}(_a.status)}));exports.default=function(_a){var status=_a.status;return status?(0,jsx_runtime_1.jsx)(StyledTaskStatus,{status,children:status&&(0,utils_1.titleCase)(status)}):null}},"../../components/clinical/task/lib/atoms/task-users.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __makeTemplateObject=this&&this.__makeTemplateObject||function(cooked,raw){return Object.defineProperty?Object.defineProperty(cooked,"raw",{value:raw}):cooked.raw=raw,cooked},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var templateObject_1,templateObject_2,jsx_runtime_1=__webpack_require__("../../node_modules/react/jsx-runtime.js"),styled_1=__importDefault(__webpack_require__("../../node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js")),styles_1=__webpack_require__("../styles/lib/index.js"),icon_1=__importDefault(__webpack_require__("../../components/styled/icon/lib/index.js")),StyledDescription=styled_1.default.small(templateObject_1||(templateObject_1=__makeTemplateObject(["\n  color: ",";\n  margin-right: 0.5rem;\n"],["\n  color: ",";\n  margin-right: 0.5rem;\n"])),styles_1.TEXT_COLOURS.SECONDARY.VALUE),StyledIcon=(0,styled_1.default)(icon_1.default)(templateObject_2||(templateObject_2=__makeTemplateObject(["\n  margin-right: 0.3rem;\n"],["\n  margin-right: 0.3rem;\n"])));exports.default=function(_a){var user=_a.user,users=_a.users;return(0,jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment,{children:[user&&(0,jsx_runtime_1.jsxs)("div",{children:[(0,jsx_runtime_1.jsx)(StyledIcon,{type:"user",size:"small",color:"grey"}),(0,jsx_runtime_1.jsx)(StyledDescription,{children:user})]}),users&&(0,jsx_runtime_1.jsxs)("div",{children:[(0,jsx_runtime_1.jsx)(StyledIcon,{type:"users",size:"small",color:"grey"}),(0,jsx_runtime_1.jsx)(StyledDescription,{children:users})]})]})}},"../../components/clinical/task/lib/index.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var task_1=__importDefault(__webpack_require__("../../components/clinical/task/lib/organisms/task.js"));exports.default=task_1.default},"../../components/clinical/task/lib/molecules/task-redacted.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __makeTemplateObject=this&&this.__makeTemplateObject||function(cooked,raw){return Object.defineProperty?Object.defineProperty(cooked,"raw",{value:raw}):cooked.raw=raw,cooked},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var templateObject_1,templateObject_2,jsx_runtime_1=__webpack_require__("../../node_modules/react/jsx-runtime.js"),styled_1=__importDefault(__webpack_require__("../../node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js")),type_summary_1=__webpack_require__("../../components/clinical/shared/type-summary/lib/index.js"),StyledRedacted=styled_1.default.div(templateObject_1||(templateObject_1=__makeTemplateObject(["\n  display: flex;\n  align-items: center;\n"],["\n  display: flex;\n  align-items: center;\n"]))),StyledRedactedDescription=(0,styled_1.default)(type_summary_1.RedactedDescription)(templateObject_2||(templateObject_2=__makeTemplateObject(["\n  flex: 1;\n"],["\n  flex: 1;\n"])));exports.default=function(){return(0,jsx_runtime_1.jsx)(StyledRedacted,{children:(0,jsx_runtime_1.jsx)(StyledRedactedDescription,{children:"Insufficient Priveleges"})})}},"../../components/clinical/task/lib/organisms/task.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";var __makeTemplateObject=this&&this.__makeTemplateObject||function(cooked,raw){return Object.defineProperty?Object.defineProperty(cooked,"raw",{value:raw}):cooked.raw=raw,cooked},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var templateObject_1,templateObject_2,templateObject_3,templateObject_4,templateObject_5,jsx_runtime_1=__webpack_require__("../../node_modules/react/jsx-runtime.js"),styled_1=__importDefault(__webpack_require__("../../node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js")),types_1=__webpack_require__("../types/lib/index.js"),menu_1=__importDefault(__webpack_require__("../../components/styled/menu/lib/index.js")),icon_1=__importDefault(__webpack_require__("../../components/styled/icon/lib/index.js")),styles_1=__webpack_require__("../styles/lib/index.js"),utils_1=__webpack_require__("../utils/lib/index.js"),task_description_1=__importDefault(__webpack_require__("../../components/clinical/task/lib/atoms/task-description.js")),task_status_1=__importDefault(__webpack_require__("../../components/clinical/task/lib/atoms/task-status.js")),task_redacted_1=__importDefault(__webpack_require__("../../components/clinical/task/lib/molecules/task-redacted.js")),task_users_1=__importDefault(__webpack_require__("../../components/clinical/task/lib/atoms/task-users.js")),StyledTask=styled_1.default.div(templateObject_1||(templateObject_1=__makeTemplateObject(["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  ","\n  ","\n"],["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  ","\n  ","\n"])),(function(_a){return _a.status===types_1.TaskStatusCode.Overdue&&"\n    color: red;\n  "}),(function(_a){return _a.status===types_1.TaskStatusCode.Due&&"\n    color: #ffa500;\n  "})),LeftSection=styled_1.default.div(templateObject_2||(templateObject_2=__makeTemplateObject(["\n  flex-grow: 1;\n  text-align: left;\n  margin-right: 0.4rem;\n"],["\n  flex-grow: 1;\n  text-align: left;\n  margin-right: 0.4rem;\n"]))),DisplayDueTime=styled_1.default.div(templateObject_3||(templateObject_3=__makeTemplateObject([""],[""]))),RightSection=styled_1.default.div(templateObject_4||(templateObject_4=__makeTemplateObject(["\n  text-align: right;\n  margin-left: 0.1rem;\n  min-width: 100px;\n"],["\n  text-align: right;\n  margin-left: 0.1rem;\n  min-width: 100px;\n"]))),ActionMenuSection=styled_1.default.div(templateObject_5||(templateObject_5=__makeTemplateObject(["\n  text-align: right;\n  margin-left: 0.6rem;\n  min-width: 28px;\n"],["\n  text-align: right;\n  margin-left: 0.6rem;\n  min-width: 28px;\n"])));exports.default=function(_a){var _b=_a.task,id=_b.id,status=_b.status,description=_b.description,isRedacted=_b.metadata.isRedacted,extension=_b.extension,users=_a.users,user=_a.user,actions=_a.actions,hoverText=_a.hoverText;return isRedacted?(0,jsx_runtime_1.jsx)(task_redacted_1.default,{}):(0,jsx_runtime_1.jsxs)(StyledTask,{status,children:[(0,jsx_runtime_1.jsxs)(LeftSection,{children:[(0,jsx_runtime_1.jsx)(task_description_1.default,{cancelled:status===types_1.TaskStatusCode.Cancelled,hoverText,description}),(0,jsx_runtime_1.jsx)(task_users_1.default,{user,users})]}),(0,jsx_runtime_1.jsxs)(RightSection,{children:[![types_1.TaskStatusCode.Complete,types_1.TaskStatusCode.Cancelled].includes(status)&&(0,jsx_runtime_1.jsx)(DisplayDueTime,{children:(0,utils_1.getStringExtension)(extension,"https://leedsth.nhs.uk/task/display-due-time")}),(0,jsx_runtime_1.jsx)(task_status_1.default,{status})]}),(0,jsx_runtime_1.jsx)(ActionMenuSection,{children:actions&&(0,jsx_runtime_1.jsx)(menu_1.default,{id:"".concat(id,"_action_menu"),actions,menuButtonOptions:{type:"button",text:"",buttonProps:{styling:{buttonStyle:"standard",padding:"0.4rem"},icon:(0,jsx_runtime_1.jsx)(icon_1.default,{type:"ellipsis-horizontal",size:"medium"}),iconPlacement:"center",color:"".concat(styles_1.BTN_COLOURS.DANGER.VALUE)}}})})]})}},"../../node_modules/classnames/index.js":(module,exports)=>{var __WEBPACK_AMD_DEFINE_RESULT__;!function(){"use strict";var hasOwn={}.hasOwnProperty;function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=typeof arg;if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg)){if(arg.length){var inner=classNames.apply(null,arg);inner&&classes.push(inner)}}else if("object"===argType){if(arg.toString!==Object.prototype.toString&&!arg.toString.toString().includes("[native code]")){classes.push(arg.toString());continue}for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}}return classes.join(" ")}module.exports?(classNames.default=classNames,module.exports=classNames):void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,[]))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}()}}]);