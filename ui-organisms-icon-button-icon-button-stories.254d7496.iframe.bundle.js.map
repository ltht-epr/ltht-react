{"version":3,"file":"ui-organisms-icon-button-icon-button-stories.254d7496.iframe.bundle.js","mappings":";AAOA;AAGA;;ACEA;ACNA;;;;;;;;;;;;;;;;AAkBA;;;AA+BA","sources":["webpack://@ltht-react/storybook/../../components/styled/icon/src/atoms/styled-icon.tsx","webpack://@ltht-react/storybook/../../components/styled/icon/src/molecules/counter-icon.tsx","webpack://@ltht-react/storybook/../../components/styled/icon/src/organisms/icon-button.tsx"],"sourcesContent":["import { FC, MouseEvent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { SerializedStyles } from '@emotion/react'\r\nimport { FontAwesomeIcon, FontAwesomeIconProps } from '@fortawesome/react-fontawesome'\r\nimport { IconSize, calculateIconSize, IconColor, calculateIconColor } from '@ltht-react/styles'\r\n\r\nconst StyledFontAwesomeIcon = styled(FontAwesomeIcon)<StyledFontAwesomeIconProps>`\r\n  ${({ color }): SerializedStyles => calculateIconColor(color)};\r\n`\r\n\r\nconst StyledIcon: FC<StyledFontAwesomeIconProps> = ({\r\n  icon,\r\n  type,\r\n  color,\r\n  customSize,\r\n  animation,\r\n  className,\r\n  clickHandler,\r\n  ...rest\r\n}) => {\r\n  const handleClick = (e: MouseEvent<SVGSVGElement>): void => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    clickHandler && clickHandler()\r\n  }\r\n\r\n  const spinClass = animation?.spin ? 'fa-spin' : ''\r\n\r\n  return (\r\n    <StyledFontAwesomeIcon\r\n      className={`${className ?? ''} icon__${type} ${spinClass}`.trimStart()}\r\n      color={color}\r\n      icon={icon}\r\n      size={calculateIconSize(customSize ?? 'medium')}\r\n      onClick={clickHandler && handleClick}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport interface IconAnimation {\r\n  spin: boolean\r\n}\r\n\r\ninterface StyledFontAwesomeIconProps extends FontAwesomeIconProps {\r\n  color: IconColor\r\n  customSize?: IconSize\r\n  animation?: IconAnimation\r\n  clickHandler?(): void\r\n}\r\n\r\nexport default StyledIcon\r\n","import { FC, HTMLAttributes } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { IconSize, IconColor } from '@ltht-react/styles'\r\nimport StyledIcon from '../atoms/styled-icon'\r\n\r\nconst StyledCounterIcon = styled.span``\r\n\r\nconst StyledCounterValue = styled.span`\r\n  font-weight: bold;\r\n`\r\n\r\nconst CounterIcon: FC<CounterIconProps> = ({ color, size, value, ...rest }) => (\r\n  <StyledCounterIcon className=\"fa-layers fa-fw\">\r\n    <StyledIcon color={color} icon={faCircle} type=\"counter\" customSize={size} {...rest} />\r\n    <StyledCounterValue className=\"fa-layers-text fa-inverse fa-xs\">{value}</StyledCounterValue>\r\n  </StyledCounterIcon>\r\n)\r\n\r\ninterface CounterIconProps extends HTMLAttributes<SVGElement> {\r\n  color: IconColor\r\n  size: IconSize\r\n  value: number\r\n}\r\n\r\nexport default CounterIcon\r\n","import styled from '@emotion/styled'\r\nimport { CSS_RESET } from '@ltht-react/styles'\r\nimport { ButtonHTMLAttributes, forwardRef } from 'react'\r\nimport Icon, { IconProps } from './icon'\r\n\r\nconst StyledInvisibleButton = styled.button`\r\n  ${CSS_RESET}\r\n  border-width: 0;\r\n  background-color: rgba(0, 0, 0, 0);\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  &:hover:not([disabled]) {\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.65;\r\n    cursor: not-allowed;\r\n  }\r\n`\r\n\r\nconst StyledIcon = styled(Icon)`\r\n  margin-right: 0.4rem;\r\n  margin-left: 0.4rem;\r\n`\r\n\r\nconst IconButton = forwardRef<HTMLButtonElement, IconButtonProps>(\r\n  ({ iconProps, text, iconPosition = 'left', ...rest }: IconButtonProps, ref) => {\r\n    if (iconPosition === 'left') {\r\n      return (\r\n        <StyledInvisibleButton ref={ref} {...rest} role=\"button\">\r\n          <StyledIcon {...iconProps} />\r\n          {text}\r\n        </StyledInvisibleButton>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledInvisibleButton ref={ref} {...rest} role=\"button\">\r\n        {text}\r\n        <StyledIcon {...iconProps} />\r\n      </StyledInvisibleButton>\r\n    )\r\n  }\r\n)\r\n\r\nexport interface IconButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n  iconProps: IconProps\r\n  text?: string\r\n  iconPosition?: 'left' | 'right'\r\n}\r\n\r\nexport default IconButton\r\n"],"names":[],"sourceRoot":""}